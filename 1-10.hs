import Data.Char 
import Data.List
import qualified Data.Map as M

-- ############################################################################
-- Problem 1 - Multiples of 3 or 5
-- https://projecteuler.net/problem=1
-- ############################################################################
-- If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
-- The sum of these multiples is 23.
-- Find the sum of all the multiples of 3 or 5 below 1000.
--
-- Decision
-- 
answer1 = sum [a | a <- [1..999], a `mod` 3 == 0 || a `mod` 5 == 0]
-- >>> answer1
-- 233168


-- ############################################################################
-- Problem 2 - Even Fibonacci numbers
-- https://projecteuler.net/problem=2
-- ############################################################################
-- Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
-- By starting with 1 and 2, the first 10 terms will be:
-- 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
-- By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
-- find the sum of the even-valued terms.
--
-- Decision
-- 
fibs = 0 : 1 : zipWith (+) fibs (tail fibs)
answer2 = sum (takeWhile (<=4000000) (filter even fibs))
-- >>> answer2
-- 4613732


-- ############################################################################
-- Problem 3 - Largest prime factor
-- https://projecteuler.net/problem=3
-- ############################################################################
-- The prime factors of 13195 are 5, 7, 13 and 29.
-- What is the largest prime factor of the number 600851475143 ?
--
-- Decision
-- 
primes :: [Int]
primes = sieve [2..]
    where
    sieve :: [Int] -> [Int]
    sieve (p:xs) = p:sieve [x | x <- xs, x `mod` p /= 0]

factors :: [Int] -> Int -> [Int]
factors [] _ = []
factors (p:ps) n = if n `mod` p == 0
    then p:factors (p:ps) (n `div` p)
    else factors (takeWhile(<=n) . dropWhile (\x-> n `mod` x /= 0) $ ps) n

answer3 = last(factors primes 600851475143)
-- >>> answer3
-- 6857


-- ############################################################################
-- Problem 4 - Largest palindrome product
-- https://projecteuler.net/problem=4
-- ############################################################################
-- A palindromic number reads the same both ways. 
-- The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
-- Find the largest palindrome made from the product of two 3-digit numbers.
--
-- Decision
-- 
-- The palindrome is:  abccba
-- It means:        100000a + 10000b + 1000c + 100c + 10b + a
-- Where a - from 1 to 9, b and c - from 0 to 9
-- It can be simplified:  100001a + 10010b + 1100c
answer4 = head [x | a <- [9,8..1], b <- [0..9], c <- [0..9], x<-[100001*a + 10010*b + 1100*c], y<-[100..999], x `mod` y == 0 && x `div` y <= 999]
-- >>> answer4
-- 906609


-- ############################################################################
-- Problem 5 - Smallest multiple
-- https://projecteuler.net/problem=5
-- ############################################################################
-- 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
-- What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
--
-- Decision
-- 
-- Primes numbers from 1 to 20 are: 2,3,5,7,11,13,17,19
-- Others are:
--   4 = 2*2 
--   6 = 3*2 
--   8 = 2*2*2 
--   9 = 3*3 
--  10 = 5*2
--  12 = 6*2
--  14 = 7*2
--  15 = 5*3
--  16 = 8*2
--  18 = 9*2
--  20 = 10*2
--  
answer5 = 2*3*5*7*11*13*17*19 * 2*2*3*2
-- >>> answer5
-- 232792560


-- ############################################################################
-- Problem 6 - Sum square difference
-- https://projecteuler.net/problem=6
-- ############################################################################
-- The sum of the squares of the first ten natural numbers is
-- 1^2 + 2^2 + ... + 10^2 = 385
-- The square of the sum of the first ten natural numbers is
-- (1 + 2 + ... + 10)^2 = 55^2 = 3025
-- Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is
-- 3025 - 385 = 2640
-- Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
--
-- Decision
-- 
answer6 = s*s - sum [x*x | x<-[1..100]]
    where s = sum [1..100]
-- >>> answer6
-- 25164150



-- ############################################################################
-- Problem 7 - 10001st prime
-- https://projecteuler.net/problem=7
-- ############################################################################
-- By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
-- What is the 10 001st prime number?
--
-- Decision
-- 
-- I have taken primesMPE function from https://wiki.haskell.org/Prime_numbers
primesMPE :: [Integer]
primesMPE = 2 : mkPrimes 3 M.empty prs 9   -- postponed sieve enlargement
    where                                 -- by decoupled primes feed loop
    prs = 3 : mkPrimes 5 M.empty prs 9
    mkPrimes n m ps@ ~(p:pt) q = case (M.null m, M.findMin m) of
      { (False, (n2, skips)) | n == n2 ->
             mkPrimes (n+2) (addSkips n (M.deleteMin m) skips) ps q
      ; _ -> if n < q
             then    n : mkPrimes (n+2)  m                  ps q
             else        mkPrimes (n+2) (addSkip n m (2*p)) pt (head pt^2)
      }
    addSkip n m s = M.alter (Just . maybe [s] (s:)) (n+s) m
    addSkips = foldl' . addSkip
answer7 = primesMPE!!(10001-1)
-- >>> answer7
-- 104743



-- ############################################################################
-- Problem 8 - Largest product in a series
-- https://projecteuler.net/problem=8
-- ############################################################################
-- The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
-- 73167176531330624919225119674426574742355349194934
-- 96983520312774506326239578318016984801869478851843
-- 85861560789112949495459501737958331952853208805511
-- 12540698747158523863050715693290963295227443043557
-- 66896648950445244523161731856403098711121722383113
-- 62229893423380308135336276614282806444486645238749
-- 30358907296290491560440772390713810515859307960866
-- 70172427121883998797908792274921901699720888093776
-- 65727333001053367881220235421809751254540594752243
-- 52584907711670556013604839586446706324415722155397
-- 53697817977846174064955149290862569321978468622482
-- 83972241375657056057490261407972968652414535100474
-- 82166370484403199890008895243450658541227588666881
-- 16427171479924442928230863465674813919123162824586
-- 17866458359124566529476545682848912883142607690042
-- 24219022671055626321111109370544217506941658960408
-- 07198403850962455444362981230987879927244284909188
-- 84580156166097919133875499200524063689912560717606
-- 05886116467109405077541002256983155200055935729725
-- 71636269561882670428252483600823257530420752963450
-- Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. 
-- What is the value of this product?
--
-- Decision
-- 
str1000digitNumber=
    "73167176531330624919225119674426574742355349194934"++
    "96983520312774506326239578318016984801869478851843"++
    "85861560789112949495459501737958331952853208805511"++
    "12540698747158523863050715693290963295227443043557"++
    "66896648950445244523161731856403098711121722383113"++
    "62229893423380308135336276614282806444486645238749"++
    "30358907296290491560440772390713810515859307960866"++
    "70172427121883998797908792274921901699720888093776"++
    "65727333001053367881220235421809751254540594752243"++
    "52584907711670556013604839586446706324415722155397"++
    "53697817977846174064955149290862569321978468622482"++
    "83972241375657056057490261407972968652414535100474"++
    "82166370484403199890008895243450658541227588666881"++
    "16427171479924442928230863465674813919123162824586"++
    "17866458359124566529476545682848912883142607690042"++
    "24219022671055626321111109370544217506941658960408"++
    "07198403850962455444362981230987879927244284909188"++
    "84580156166097919133875499200524063689912560717606"++
    "05886116467109405077541002256983155200055935729725"++
    "71636269561882670428252483600823257530420752963450"

answer8 = maximum products
    where products = map (foldl (\a c -> a * digitToInt c) 1) digits
          digits = drop 13 (substrs [] str1000digitNumber)
          substrs :: [[Char]]->[Char]->[[Char]]
          substrs acc []  = acc
          substrs acc (x:xs)  = substrs (take 13 xs:acc) xs 
-- >>> answer8
-- 23514624000



-- ############################################################################
-- Problem 9 - Special Pythagorean triplet
-- https://projecteuler.net/problem=9
-- ############################################################################
-- A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
-- a^2 + b^2 = c^2
-- For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
-- There exists exactly one Pythagorean triplet for which a + b + c = 1000.
-- Find the product abc.
--
-- Decision
-- 
-- Consider two equations
--   a + b + c = 1000
--   a^2 + b^2 = c^2
-- Next equation has gotten by solving two equations above together
--   1000000 - 2000*(a+b) + 2*a*b = 0
answer9 = a*b*c
    where
    c = 1000 - b - a
    (a,b) = head [(a,b) | a<-[1..998], b<-[1..998], 1000000 - 2000*(a+b) + 2*a*b == 0]
-- >>> answer9
-- 31875000



-- ############################################################################
-- Problem 10 - Summation of primes
-- https://projecteuler.net/problem=10
-- ############################################################################
-- The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
-- Find the sum of all the primes below two million.
answer10 = sum (takeWhile (<2000000) primesMPE)  
-- >>> answer10
-- 142913828922
